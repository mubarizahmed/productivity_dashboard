/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/projects": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.projects.id"];
          name?: parameters["rowFilter.projects.name"];
          todoistId?: parameters["rowFilter.projects.todoistId"];
          todoistURL?: parameters["rowFilter.projects.todoistURL"];
          calendarId?: parameters["rowFilter.projects.calendarId"];
          calendarName?: parameters["rowFilter.projects.calendarName"];
          color?: parameters["rowFilter.projects.color"];
          user_id?: parameters["rowFilter.projects.user_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["projects"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** projects */
          projects?: definitions["projects"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.projects.id"];
          name?: parameters["rowFilter.projects.name"];
          todoistId?: parameters["rowFilter.projects.todoistId"];
          todoistURL?: parameters["rowFilter.projects.todoistURL"];
          calendarId?: parameters["rowFilter.projects.calendarId"];
          calendarName?: parameters["rowFilter.projects.calendarName"];
          color?: parameters["rowFilter.projects.color"];
          user_id?: parameters["rowFilter.projects.user_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.projects.id"];
          name?: parameters["rowFilter.projects.name"];
          todoistId?: parameters["rowFilter.projects.todoistId"];
          todoistURL?: parameters["rowFilter.projects.todoistURL"];
          calendarId?: parameters["rowFilter.projects.calendarId"];
          calendarName?: parameters["rowFilter.projects.calendarName"];
          color?: parameters["rowFilter.projects.color"];
          user_id?: parameters["rowFilter.projects.user_id"];
        };
        body: {
          /** projects */
          projects?: definitions["projects"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/events": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.events.id"];
          name?: parameters["rowFilter.events.name"];
          url?: parameters["rowFilter.events.url"];
          projectId?: parameters["rowFilter.events.projectId"];
          completed?: parameters["rowFilter.events.completed"];
          dueDate?: parameters["rowFilter.events.dueDate"];
          priority?: parameters["rowFilter.events.priority"];
          startDateTime?: parameters["rowFilter.events.startDateTime"];
          endDateTime?: parameters["rowFilter.events.endDateTime"];
          user_id?: parameters["rowFilter.events.user_id"];
          isTask?: parameters["rowFilter.events.isTask"];
          completedAt?: parameters["rowFilter.events.completedAt"];
          scheduledId?: parameters["rowFilter.events.scheduledId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["events"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** events */
          events?: definitions["events"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.events.id"];
          name?: parameters["rowFilter.events.name"];
          url?: parameters["rowFilter.events.url"];
          projectId?: parameters["rowFilter.events.projectId"];
          completed?: parameters["rowFilter.events.completed"];
          dueDate?: parameters["rowFilter.events.dueDate"];
          priority?: parameters["rowFilter.events.priority"];
          startDateTime?: parameters["rowFilter.events.startDateTime"];
          endDateTime?: parameters["rowFilter.events.endDateTime"];
          user_id?: parameters["rowFilter.events.user_id"];
          isTask?: parameters["rowFilter.events.isTask"];
          completedAt?: parameters["rowFilter.events.completedAt"];
          scheduledId?: parameters["rowFilter.events.scheduledId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.events.id"];
          name?: parameters["rowFilter.events.name"];
          url?: parameters["rowFilter.events.url"];
          projectId?: parameters["rowFilter.events.projectId"];
          completed?: parameters["rowFilter.events.completed"];
          dueDate?: parameters["rowFilter.events.dueDate"];
          priority?: parameters["rowFilter.events.priority"];
          startDateTime?: parameters["rowFilter.events.startDateTime"];
          endDateTime?: parameters["rowFilter.events.endDateTime"];
          user_id?: parameters["rowFilter.events.user_id"];
          isTask?: parameters["rowFilter.events.isTask"];
          completedAt?: parameters["rowFilter.events.completedAt"];
          scheduledId?: parameters["rowFilter.events.scheduledId"];
        };
        body: {
          /** events */
          events?: definitions["events"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/timers": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.timers.id"];
          startedAt?: parameters["rowFilter.timers.startedAt"];
          user_id?: parameters["rowFilter.timers.user_id"];
          eventId?: parameters["rowFilter.timers.eventId"];
          stoppedAt?: parameters["rowFilter.timers.stoppedAt"];
          pausedDuration?: parameters["rowFilter.timers.pausedDuration"];
          pausedAt?: parameters["rowFilter.timers.pausedAt"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["timers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** timers */
          timers?: definitions["timers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.timers.id"];
          startedAt?: parameters["rowFilter.timers.startedAt"];
          user_id?: parameters["rowFilter.timers.user_id"];
          eventId?: parameters["rowFilter.timers.eventId"];
          stoppedAt?: parameters["rowFilter.timers.stoppedAt"];
          pausedDuration?: parameters["rowFilter.timers.pausedDuration"];
          pausedAt?: parameters["rowFilter.timers.pausedAt"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.timers.id"];
          startedAt?: parameters["rowFilter.timers.startedAt"];
          user_id?: parameters["rowFilter.timers.user_id"];
          eventId?: parameters["rowFilter.timers.eventId"];
          stoppedAt?: parameters["rowFilter.timers.stoppedAt"];
          pausedDuration?: parameters["rowFilter.timers.pausedDuration"];
          pausedAt?: parameters["rowFilter.timers.pausedAt"];
        };
        body: {
          /** timers */
          timers?: definitions["timers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  projects: {
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: text */
    name: string;
    /** Format: text */
    todoistId?: string;
    /** Format: text */
    todoistURL?: string;
    /** Format: text */
    calendarId?: string;
    /** Format: text */
    calendarName?: string;
    /** Format: text */
    color?: string;
    /** Format: uuid */
    user_id?: string;
  };
  events: {
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: text */
    name: string;
    /** Format: text */
    url?: string;
    /**
     * Format: text
     * @description Note:
     * This is a Foreign Key to `projects.id`.<fk table='projects' column='id'/>
     */
    projectId: string;
    /** Format: boolean */
    completed?: boolean;
    /** Format: date */
    dueDate?: string;
    /** Format: smallint */
    priority?: number;
    /** Format: timestamp with time zone */
    startDateTime?: string;
    /** Format: timestamp with time zone */
    endDateTime?: string;
    /** Format: uuid */
    user_id?: string;
    /** Format: boolean */
    isTask?: boolean;
    /** Format: timestamp without time zone */
    completedAt?: string;
    /** Format: text */
    scheduledId?: string;
  };
  timers: {
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    startedAt: string;
    /** Format: uuid */
    user_id: string;
    /**
     * Format: text
     * @description Note:
     * This is a Foreign Key to `events.id`.<fk table='events' column='id'/>
     */
    eventId: string;
    /** Format: timestamp with time zone */
    stoppedAt?: string;
    /** Format: integer */
    pausedDuration?: number;
    /** Format: timestamp with time zone */
    pausedAt?: string;
  };
}

export interface parameters {
  /** @description Preference */
  preferParams: "params=single-object";
  /** @description Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** @description Preference */
  preferCount: "count=none";
  /** @description Preference */
  preferPost:
    | "return=representation"
    | "return=minimal"
    | "return=none"
    | "resolution=ignore-duplicates"
    | "resolution=merge-duplicates";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description projects */
  "body.projects": definitions["projects"];
  /** Format: text */
  "rowFilter.projects.id": string;
  /** Format: text */
  "rowFilter.projects.name": string;
  /** Format: text */
  "rowFilter.projects.todoistId": string;
  /** Format: text */
  "rowFilter.projects.todoistURL": string;
  /** Format: text */
  "rowFilter.projects.calendarId": string;
  /** Format: text */
  "rowFilter.projects.calendarName": string;
  /** Format: text */
  "rowFilter.projects.color": string;
  /** Format: uuid */
  "rowFilter.projects.user_id": string;
  /** @description events */
  "body.events": definitions["events"];
  /** Format: text */
  "rowFilter.events.id": string;
  /** Format: text */
  "rowFilter.events.name": string;
  /** Format: text */
  "rowFilter.events.url": string;
  /** Format: text */
  "rowFilter.events.projectId": string;
  /** Format: boolean */
  "rowFilter.events.completed": string;
  /** Format: date */
  "rowFilter.events.dueDate": string;
  /** Format: smallint */
  "rowFilter.events.priority": string;
  /** Format: timestamp with time zone */
  "rowFilter.events.startDateTime": string;
  /** Format: timestamp with time zone */
  "rowFilter.events.endDateTime": string;
  /** Format: uuid */
  "rowFilter.events.user_id": string;
  /** Format: boolean */
  "rowFilter.events.isTask": string;
  /** Format: timestamp without time zone */
  "rowFilter.events.completedAt": string;
  /** Format: text */
  "rowFilter.events.scheduledId": string;
  /** @description timers */
  "body.timers": definitions["timers"];
  /** Format: text */
  "rowFilter.timers.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.timers.startedAt": string;
  /** Format: uuid */
  "rowFilter.timers.user_id": string;
  /** Format: text */
  "rowFilter.timers.eventId": string;
  /** Format: timestamp with time zone */
  "rowFilter.timers.stoppedAt": string;
  /** Format: integer */
  "rowFilter.timers.pausedDuration": string;
  /** Format: timestamp with time zone */
  "rowFilter.timers.pausedAt": string;
}

export interface operations {}

export interface external {}
